2. Building a walking skeleton Part One - API
Part 6: Intro to Entity Framework

What is Entity Framework?

- An Object Relational Mapper (ORM)
- Translates our code into SQL commands that update our tables in the database 

EF Converts our code to SQL commands.
EG: DbContext.Users.Add(new User {Id = 4, Name = John}) -> INSERT INTO Users(Id, Name) VALUES(4, John)

Entity Framework Features

- Querying: EF helps in querying  data from databases using LINQ (Language Integrated Query)
- Mapping: EF maps your classes with 
- Change Tracking: 
- Saving
- Concurrency
- Transactions
- Caching
- Build-in conventions
- Migrations

How does EF work?

1. Create an instance of DbContext
2. Add entities to it
3. Use LINQ to query and filter the entities
4. Call SaveChanges() on the context to save changes made to the entities
5. The Context tracks all changes done to the objects added to it
   It also keeps track of what has been deleted or updated
6. When calling SaveChanges(), EF generates appropriate SQL statements based on the state of each entity
7. If there are any conflicts with concurrent updates by other users, EF will handle them for you 
8. Once the transaction is complete, EF closes the connection to the DB


2.12

How to optimize your system?

Make Async calls whereever required. [Best practice]


_________________________________________________________________________________________________

Section 2 Summary:

Implement the basic API functionality and have an introductory understanding of:

1. Using the dotnet CLI
2. API Controllers and Endpoints
3. Entity Framework
4. The API Project Structure
5. Configuration and Environment variables
6. Source control

Section 3:

1. Using the Angular CLI
2. How to create a new Angular app
3. The Angular project files
4. The Angular Bootstrap proces
5. Using the Angular HTTP Client Service
6. Running an Angular app over HTTPS (use SSL certificate)
7. How to add packages using NPM

Section 4: Authentication

Implement basic authentication in our app and have an undestanding of:

1. How to store passwords in the database
2. Using Inheritance in C# - DRY
3. Using C# debugger
4. Using Data Transfer Objects (DTOs)
5. Validation
6. JSON Web Tokens (JWTs)
7. Using services in C#
8. Middleware
9. Extension methods - DRY

1. Safe Storage of passwords

Option 1 - Storing in clear text (database) - Store the passwords as it is in users table.

Option 2 - Hasing the passwords
   The problem is: is a hacker gets your passwordHash, they can easily get users passwords using online libraries which has almost all the versions of hash stored.

Option 3 - Hashing and salting the password - BETTER
In this example, we will use hashing  and salting the password. This means that when  a user logs into your application, you hash their OPTION, but more complex to implement.


6. JSON Web Tokens (JWTs)

How to authenticate an API?
   API is not something we maintain a session state with.
   We simply make a request to our API and it returns data to us.
      And then relationship is finished with the API unitl we need to make another request.

Tokens
   Tokens are a good thing to use with an API because they're small enough to send with every single request.

JSON Web Tokens (JWT)
   Industry Standard for tokens (RFC 7519)
   Self contained and can contain:
      Credentials
      Claims
      Other Information

JWT structure - JWT is a long string having 3 parts, namely, 
   Header: Algorithm & Token type,
   Payload: Data (User related information like username, expiry time etc),
   Verify Signature : A digital signature used by the sender to verify the token’s integrity. (Encrypted)

We add an authentication header to the request and then the server will take a look at the token and verify that the token is valid.
Server is having the private key, using that key, server verifies  whether the token is valid or not, without needing to make a call to database. 

Benefits of JWT:
   No session to manage - JWTs are self contained tokens
   Portable - A single token can be used with multiple backends.
   No Cookies required - mobile friendly.
   Performance - Once a token is issued, there is no need to make a database request to verify a users authentication.
   

Section 5: Client Login and register

Implement the login and register functionality into the app as well as understanding:

1. Creating components using Angular CLI
2. Using Angular template forms
3. Using Angular services
4. Understanding Observables
5. Using Angular structural directives to conditionally display elements on a page.
6. Component communication from parent to child.
7. Component communication from child to parent.

4. Understanding Observables
   New Standard for managing async data included in ES7 (ES2016).
   
   An Observable is a stream of data that you subscribe to.

   Introduced in Angular v2

   Observables are lazy collections of multiple values over time.

   You can think of Observables like a newsletter:
      Only subscribers of the newsletter receive the newsletter.
      If no-one subscribes to the newsletter it probably will not be printed.
   Tip:
      If we make a HTTP request, then that request will automatically completed, means don't have to unsubscribes the Observable. 

Promise                                         -                 Observables
      
Provides a single future value                  -     Emits multiple values over time.
Not lazy                                        -     lazy
Can not cancel                                  -     Able to cancel
                                                      Can use with map, filter, reduce, and other operators

Async Pipe
Another way to get data - Async Pipe

EG:
   <li *ngFor='let member of service.getMembers() | async'> {{ member.username }} </li>

Advantages: 
   It automatically subscribes/ unsubscribes from the Observables

Tips:
   Angular Services:
      Angular Services are singleton, this make them a good place to share data between componets.
   Observables:
      Looked into ways how we can subscribe to an Observables in different ways.
      Async pipe:
         Async pipe automatically subscribe and unsubscribes from Observables without us needing to manually use the subscribe method.
   Use of pipe:
      Use of pipe along with map to change the data returning from a HTTP request.
   Communication:
      Parent to child communication using property binding
      Child to parent communication using event binding


Section 6: Routing in Angular

Implement routing in our Angular app and have an understanding of:

1. Angular routing
2. Adding a bootstrap theme
3. Using Angular route guards
4. Using a shared module

Section 7: Error Handling (CHRG: have a look)

Implement global error handling in both the API and the Angular application.
Also to have an understanding of:

1. API Middleware
2. Angular Interceptors
3. Troubleshooting exceptions

Section 8: Extending the API

Implement furthur functionality into our API and gain an understanding of:

1. Entity Framework relationships
2. Entity Framework conventions
3. Seeding Data into the database
4. The repository pattern
5. Using AutoMapper

Use the below json code to generate randon-json data

[
  '{{repeat(5)}}',
  {
    UserName: '{{firstName("female")}}',
    Gender: 'female',
    DateOfBirth: '{{date(new Date(1950, 0, 1), new Date(1999, 11, 31), "YYYY-MM-dd")}}',
    KnownAs: function(){ return this.UserName; },
    Created: '{{date(new Date(2019, 0, 1), new Date(2020, 5, 30), "YYYY-MM-dd")}}',
    LastAct: '{{date(new Date(2020, 4, 1), new Date(2020, 5, 30), "YYYY-MM-dd")}}',
    Introduction: '{{lorem(1, "paragraphs")}}',
    LookingFor: '{{lorem(1, "paragraphs")}}',
    Interests: '{{lorem(1, "paragraphs")}}',
    City: '{{city()}}',
    Country: '{{country()}}',
    Photos: [
      {
        url: function(num) {
          return 'https://randomuser.me/api/portraits/women/' + num.integer(1, 99) + '.jpg';
        },
        isMain: true
      }
    ]
  }
]

URL: https://json-generator.com/#

REPOSITORY PATTERN

A Repository mediates between the domain and data mapping layers, acting like an in-memory domain object collection.

DBContext is basically translating the logic, the queries  and operations that we need to perform on our Database and that we're writing in a controller.
And fetching out the data from database & returning it to the controller so that it can be returned to CLIENT.

After adding REPOSITORY PATTERN

We are introducing a new layer (Layer of abstraction) in between Controller & DBContext classes.
So instead of the controller going directly to the DBContext, it then uses our repository and executes the methods inside there.
Now, the repository is going to use the DBContext to go and extract the logic inside this

Benefits:
1. It encapsulates the logic
2. Reduces Duplicate query logic
3. Promotes testability (It is easier to test against an interface of a repository than it is to test against a DB Context)

Advantages:

1. Minimizes duplicate query logic
2. Decouples application from persistence Framework
3. All Database queries are centralized and not scattered throughout the app.
4. Allows us to change ORM (Object Relational Mapping) easily
5. Promotes testability
   We can easily Mock a Repository interface, testing against the DBContext is more dificult.


Disadvantages:

1. Abstraction of an abstraction
   Entity Framework is an abstraction, A repository is an abstraction from entity framework.
2. Each root entity should have it's own repository which means more code.
3. Also need to implement the UnitOfWork pattern to control transactions.


AUTOMAPPER

AutoMapper helps to map data from one object to another.










------------------------------------------------------------------------------------------------------------------
Blackbox AI - START

The Repository Pattern is a design pattern that follows the principles of the Model–View–ViewModel (MVVM) architectural pattern by providing a 

A repository  acts as a layer between your data model (the EF DbContext) and the service that needs to interact with it. This allows you to hide all
The Repository Pattern provides a layer of abstraction between the data access layer (DAL) and the business logic or domain model. It acts
The Repository Pattern provides a layer of abstraction between the data model (the EF DbContext) and the service layer that uses the data.
The Repository Pattern provides a layer of abstraction between the data access layer (DAL) and the business logic or domain model. It acts
The Repository Pattern provides a layer of abstraction.

Blackbox AI - END
------------------------------------------------------------------------------------------------------------------



9. Building the user interface

Implement thhe components that make up thhe user interface in our application and gain an understanding of:

1. Using Typescript types
2. Using the Interceptor to send JWT tokens
3. Using bootstrap for styling 
4. Basic css tricks to enhance the look
5. Using a 3rd party photo gallery
6. Using Route params



Section 10: Updating Resources

Implement persistence when updating resources in the API and gaining an understanding of:

1. Angular template forms
2. The CanDeactivate Route Guard
3. The @ViewChild Decorator
4. Persisting changes to the API
5. Adding loading indicators to the client app
6. Caching data in Angular services.

 


----------------------------------------------------------------------------------------

Study about:

1. Interceptors
2. Activated Route